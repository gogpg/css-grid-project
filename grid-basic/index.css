* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;                  /*The box-sizing property allows us to include the padding and border in an element's total width and height. If you set box-sizing: border-box; on an element, padding and border are included in the width and height*/
    font-size: 30px;
}

.grid-container {
    height: 100vh;                               /* 100vh means that the initial body height will take 100% of the viewport height, whereas the use of min-height instead of height will let the body element grow even more if necessary.*/
    border: 10px solid green;
    display: grid;
    /*grid-template-columns: 30% 30% 30%;              kiek reikia columns ir kiek vietos jos turi uzimti (trys kolonos, kiekviena uzima 30% grid-container plocio. cia yra plociai kuriuos mes nustatome patys (explicite), kadandi stulpeliu yra daugiau, nei mes turime items(divu), tai kitus automatiskai wrapina po apacia.*/
    /*grid-template-columns: 1fr 100px 1fr;*/
    /*grid-template-columns: repeat(3, 1fr);*/
    /*grid-template-columns: repeat(3, 1fr);
     grid-template-rows: 200px 200px;                  nustatau eiluciu auksti, ir kieki. dvi eilutes 100px aukscio., kadandi itemu yra daugiua nei du, tai ie nusitesia iki 3 eiluciu, pirmos dvi eilutes bus numatyto aukscio 100px, trecia uzims  isa likusi auksti*/
    /*grid-auto-rows: 200px;                           galima nustatyti, kad kiekviena nauja eilute, kuri atsiras padaugejus item skaiciui bus nustatyto 200px aukscio*/
    /*justify-items: center;                           pozicionuojame item centre grid cell, defaultas yra strech, kai item issitempia per visa grid cell ilgi*/
    /*align-items: center;                             items lygiuosi centre grid cell ziurint is aukscio perspektyvos.*/
    /*justify-content: center;                         visus items pozicionuojame grid-conteiner centre, jau nebe celese.*/
    /*align-content: center; 
    /*grid-row-gap: 20px;                              tarpas tarp eiluciu
    /*grid-gap: 10px 20px;                             tarpas tarp eiluciu 10px, tarpas tarp stulpeliu 20px.
    /*grid-gap: 20px;                                  jei norime vienodu tarpu ir tarp stulpeliu ir tap eiluciu, vienodi tarpai aplink items*/

    /*
    grid-template-areas:                       pagal item suteiktus pavadinimus*/
        /* "header header header"                pirma eilute - trys kolonas uzima header item-1
        "nav main ads"                           antra eilute nav item-2, main item-3, ads item-4 
        "footer footer footer";                  trecia eilute tris stulpelius uzima footer item-5
        grid-template-rows: 60px 1fr 60px;       triju eiluciu auksciai
        grid-template-columns: 20% 1fr 15%;      stulpeliu plociai 

    */
        grid-template:                              /*tas pats kaip auksciau grid-template-areas*/
        "header header header header" 150px         /*eilute - kas uzims kiek stulpeliu ir koks bus eilutes aukstis*/
        "nav main . ads" 1fr                        /*jei norime tuscios vietos, rasome taska */
        "footer footer footer footer" 100px
         / 20% 1fr 50px 15%;                             /*stulpeliu plociai */

}

.grid-item {
    background-color: beige;
    border: 4px solid orangered;
    padding: 20px;
}

/*child items*/

/*
.item-1 {
 grid-column-start: 1;        prasideda ties pirma linija pacioje pradzioje.
 grid-column-end: 3;          baigiasi ties trecia grid column linija
 grid-column: 1 / 3;          tas pats kas virsutines dvi eilutes
}
*/

/*.item-2 {
    grid-row-start: 1;           prasideda nuo pacio virsaus
    grid-row-end: 3;             baigiasi tries trecia row linija
    grid-column-start: 3;
    grid-column-end: 4;
    grid-row: 1 / 3;
    grid-column: 3 / 4; 
    grid-area: 1 / 3 /3 /4;       row start, column start, row end, column end 
    z-index: 1;
    
}*/

/*.item-3 {
    grid-row: 2 / span 3;         tokia pati reiksme, kaip uzrasymu virsuje, tik kitaip uzrasyta. span 2 apima dvi rows.
    grid-column: 1 / span 2;
    /*grid-area: 2 / 1 / span 2 / span 2;
}*/

/*.item-4 {
    grid-row: 2 / span 2;
    grid-column: 2 / span 2;      padarome, kad 4 itemas uzliptu ant kitu itemu, po to ju matomuma manipuliuojame su z-index
}*/

/*.item-5 {
    
}*/

/*--------------------------------*/

/* .item-2 {
     justify-self: center;  /*pozicionuoju viena item viduje cell 
    align-self: center; 
    /*place-self: center center; ta pati reiksme, kaip auksciau esanciu 2 eiluciu 
    /*place-self: start center;
} */

/*----------------------------------*/

.item-1 {
  grid-area: header;
}
.item-2 {
    grid-area: nav;
}
.item-3 {
    grid-area: main;
}
.item-4 {
    grid-area: ads;
}
.item-5 {
    grid-area: footer;
}






